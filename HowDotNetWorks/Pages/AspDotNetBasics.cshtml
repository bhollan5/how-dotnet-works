@page
@model HowDotNetWorks.Pages.AspDotNetBasicsModel
@{
}

<div class="px-8">
    <h1 class="display-4">ASP.NET Basics</h1>
    <p>
        ASP.NET is the part of the .NET framework that provides tools 
        specifically for building web apps. 
    </p>
    <p>
        ASP stands for Active Server Pages.  There are several different 
        versions -- this page will be discussing the most recent version, ASP.NET Core.
    </p>
    <br/>
    <p>
        ASP.NET allows users to build web pages with HTML, CSS, Javascript and C#. 
    </p>
    <p>
        ASP.NET also provides networking tools, for API calls, and also web sockets.
    </p>
    <br/><br />
    <hr />
    <br/><br/>
    <h2>Making an ASP.NET website</h2>
    <p>
        Microsoft has a good tutorial for building ASP.NET websites 
        <a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/razor-pages-start?view=aspnetcore-6.0&tabs=visual-studio" target="_blank">here</a>,
        so I'll just summarize the important info. 
    </p>
    <br/>
    <p>
        Visual Studio provides an easy, quick set up for a Razor Pages
        Web App.  That's what you'll want to use. <b>Razor</b> is the engine
        for using C# in HTML pages. 
    </p>
    <p>
        After creating a named project, you'll have the following files 
        and folders to work with:
    </p>
    <ul>
        <li>
            A <b>Pages</b> folder, containing web pages. Each web page contains 
            two files:
        </li>
        <ul>
            <li>A <b>.cshtml</b> file, defining the web page contents in Razor.</li>
            <li>A <b>.cshtml.cs</b> file, with C# code handling page events.<br/></li>
        </ul>
        <li>A <b>wwwroot</b> file, with static assets including HTML, CSS and JS.<br/></li>
        <li><b>appsettings.json</b>, which contains app configuration details.<br/></li>
        <li><b>program.cs</b>, which sets up Razor, runs some optional "middleware" functions, and runs the app.</li>
    </ul>
</div>